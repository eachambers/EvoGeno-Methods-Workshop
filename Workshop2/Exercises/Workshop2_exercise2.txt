# ========================================================================================
#                                      WORKSHOP 2
# ========================================================================================

# For relevant information and files, please go to the workshop's Github page here:
# https://github.com/eachambers/EvoGeno-Methods-Workshop/tree/main/Workshop2

# If you followed the installation instructions provided, you should be able to activate 
# your conda environment (EvoGen). If you have not done so:

conda create -n EvoGen

# Install relevant packages in your environment and activate:

conda activate EvoGen

# For this exercise, we'll be using the following programs:
#			vcftools
#			bedtools
#			GADMA
#			Gemma
#			R

# ========================================================================================
#                                      EXERCISE 2
# ========================================================================================

# For the second exercise we will be primarily working in R to identify loci that are
# significantly associated with environmental variation. There are many packages that do this
# but we will learn to use RDA in the R package 'vegan' today. Input data for this exercise are
# two files: (1) a genotype matrix in PLINK .raw format, (2) a .csv file including sample and climate data.
# I have already converted a vcf to raw file using plink: plink --vcf <input.vcf> --allow-extra-chr --out <output file name> --recode A
# The command --allow-extra-chr is commonly needed in plink if you are working with a scaffold level genome assembly.

# ======================= 1. Importing data to R and running RDA ======================

# Answer the following questions using R.
# Make sure the following packages are installed and loaded: vegan, psych, tidyr, dplyr.

#		(1a) Read data into R.
#				The environmental file can be input using read.csv command: env<-read.csv(<input.csv>, header=TRUE)
#				The genotype file will be uploaded using read.PLINK: gen<-read.PLINK(<genotype file name>)
#			Check that you have successfully loaded the plink file. How many individuals and SNPs are there? (hint: print name of genlight object, or dim(genlight name))	
#				*** YOUR ANSWER HERE ***

#		(1b) Onces the file is loaded confirm that sample IDs from both files match. This is very important!
#			 	Assuming you named your genotype data 'gen' and environmental data 'env', what
#			 	does the following code return: identical(gen$ind.names, env[,1]) ?
#				*** YOUR ANSWER HERE ***

#		(1c) OK let's run the RDA code! 1st subset your enviromental data to just the predictor variables with this code:
#				pred<-env[,13:18]
#				perform RDA: ex.rda<-rda(gen ~ ., data=pred, scale=T). This may take a minute to run.
#				run print(ex.RDA). What code is returned from the RDA analysis?
#				*** YOUR ANSWER HERE ***

# ======================== 2. Plotting the results of an RDA analysis =========================

#		Once the RDA model has been run, we can now plot the results to see how different environmental parameters
#		shape variation in the data. We can also explore how different populations cluster along the different
#		RDA axes.

#		(2a) Still in R plot the results of your rda using the command plot(ex.RDA, scaling=3) (or whatever you named the RDA analysis)
#			You may need to be a little patient while results are plotted. 
#			Once the plot finishes, which arrows seem to influence RDA1, RDA2, both? 
#				*** YOUR ANSWER HERE ***
#	
#		(2b) !!!BONUS exercise!!! You can take advantage of plotting functionality in R to gain further insights into 
#				how environmental variation structures genetic variation in different populations of interest.
#				Let's assign colors to the different subspecies of Savannah sparrow using the following code:
#				levels(SAVSenv$Subspecies)<-c("alaudinus", "anthinus", "brooksi", "labrodorius", "nevadensis", "oblitus", "sandwichensis", "savana"  )
#				sub<-SAVSenv$Subspecies
#				bg <- c("#ff7f00","#1f78b4","#ffff33","#a6cee3","#33a02c","#e31a1c", "gray", "brown") %>% setNames(c("alaudinus", "anthinus", "brooksi", "labrodorius", "nevadensis", "oblitus", "sandwichensis", "savana"  ))
#				
#				You can then add colored points to the previous plot:
#				points(SAVS.rda2, display="sites", pch=21, cex=1.3, col="gray32", scaling=3, bg=bg[sub])
#				
#				and a legend:
#				legend("topright", legend=levels(sub), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)
#				
#				Which subspecies are separated by RDA1? or RDA2?
#				*** YOUR ANSWER HERE ***

# ====================== 3. Identifying outliers in RDA  ==========================
#		Finally we can identify the outlier SNPs generated by RDA in R.
#		to begin we will need to get the loading scores for all the SNPs with the following code:
#		load.rda<-scores(ex.rda, choices=c(1:3), display="species")

#		(3a) The loadings stored in load.rda should be for the first three dimensions.
#			 How many variants are in each dimension: length(load.rda[,1])?
#			 Plot a histogram of the the loadings for RDA1, 2, 3: (hint: hist(load.rda[,1]))
#
				*** YOUR ANSWER HERE ***

#		(3b) Here is a small function for detecting outliers
#			 outliers <-function(x,z) {lims<-mean(x) + c(-1,1)*z*sd(x) 
#			 x[x < lims[1] | x > lims[2]]
#			 }
#			 
#			 Use this with different thresholds for the sd.
#			 example for 3*sd: cand1 <- outliers(load.rda[,1], 3)
#			 How many outliers do you have for each loading?
 				*** YOUR ANSWER HERE ***

#		(3c) Bonus!!! Continue with this tutorial: https://popgen.nescent.org/2018-03-27_RDA_GEA.html
#				Can you determine the number of SNPs associated with each environmental parameter?	
 				*** YOUR ANSWER HERE ***		
